syntax = "proto3";
package com.raven.common.protos;

option java_outer_classname = "Message";

message RavenMessage {
  Type type = 1;
  //oneof的意思：如果有多个可选字段，在某一个时刻只能只有一个值被设置，可以节省内存空间
  oneof data {
    Login login = 2;
    LoginAck loginAck = 3;
    UpDownMessage upDownMessage = 4;
    HeartBeat heartBeat = 5;
    MessageAck messageAck = 6;
    HisMessagesReq hisMessagesReq = 7;
    HisMessagesAck hisMessagesAck = 8;
    ConverReq converReq = 9;
    ConverAck converAck = 10;
    SSMessage ssMessage = 11;
  }

  enum Type {
    Login = 0;
    LoginAck = 1;
    UpDownMessage = 2;
    HeartBeat = 3;
    MessageAck = 4;
    HisMessagesReq = 5;
    HisMessagesAck = 6;
    ConverReq = 7;
    ConverAck = 8;
    SSMessage = 9;
  }
}

message Login {
  uint64 id = 1; //消息ID
  string token = 2; // token
}

message LoginAck {
  uint64 id = 1; //消息ID
  Code code = 2; //返回码
  uint64 time = 3; //消息时间
}

// 客户端至服务器，上下行消息
message UpDownMessage {
  uint64 id = 1; // 服务端消息ID
  uint64 cid = 2; // 客户端消息ID，上行CS需要，下行SC不需要
  string fromUid = 3; // 发送人ID
  repeated string targetUid = 4; // 单聊为接收者id, 群聊支持 群定向
  string convId = 5; //
  ConverType converType = 6; // 会话类型
  MessageContent content = 7; // 内容
}

// 服务器至服务器消息，用于RPC通讯
message SSMessage {
  uint64 id = 1; // 服务端消息ID
  string appKey = 2; // 应用信息
  string fromUid = 3; // 发送人ID
  repeated string targetUid = 4; // 单聊为接收者id, 群聊支持 群定向
  string convId = 5; // 会话id
  ConverType converType = 6; // 会话类型
  MessageContent content = 7; // 内容
}

// 心跳
message HeartBeat {
  uint64 id = 1; // 消息ID
  HeartBeatType heartBeatType = 2;
}

enum HeartBeatType {
  PING = 0;
  PONG = 1;
}

// 消息ACK
message MessageAck {
  uint64 id = 1; // 服务端消息ID
  uint64 cid = 2; // 客户端消息ID
  string convId = 3; // 会话id
  uint64 time = 4; // 发送时间
  Code code = 5; // 返回码
}

enum Code {
  SUCCESS = 0;
  CLIENT_ID_REPEAT = 1;
  CONVER_TYPE_INVALID = 2;
  KAFKA_ERROR = 3;
  CONVER_ID_INVALID = 4;
  NO_TARGET = 5;
  TOKEN_INVALID = 6;
  TOKEN_EXPIRE = 7;
  OPERATION_TYPE_INVALID = 8;
}

// 会话类型
enum ConverType {
  SINGLE = 0;
  GROUP = 1;
}

// 消息内容
message MessageContent {
  string type = 1; //AH:TXT, AH:IMG,  自定义扩展，足够灵活，不用总改pb.
  string content = 2; // 内容,按type进行json解析
  uint64 time = 3; // 消息时间
}

// 历史消息请求
message HisMessagesReq {
  uint64 id = 1; // 消息ID 客户端生成
  string converId = 2; // 会话id
  uint64 beginId = 3; // 消息起始id
}

// 历史消息响应
message HisMessagesAck {
  uint64 id = 1; // 消息ID  客户端生成
  string converId = 2; // 会话id
  ConverType convType = 3; // 会话类型
  repeated MessageContent messageList = 4; // 消息列表
  uint64 unReadCount = 5; // 历史消息未读数
}

// 会话操作请求  消息ID使用客户端生成
message ConverReq {
  uint64 id = 1; // 消息ID
  OperationType type = 2;
  string conversationId = 3; // 会话ID
}

enum OperationType {
  DETAIL = 0;
  ALL = 1;
}

// 会话操作结果
message ConverAck {
  uint64 id = 1; // 消息ID
  Code code = 3; // 返回码
  uint64 time = 4; // 时间
  ConverInfo converInfo = 5;
  repeated ConverInfo converList = 6;
}

// 会话详情
message ConverInfo {
  string converId = 1; // 会话ID
  ConverType type = 2; // 会话类型
  repeated string uidList = 3; // 单聊会话 用户列表
  string groupId = 4; //  群会话 群ID
  uint64 readMsgId = 5; // 已读消息ID
  MessageContent lastContent = 6; // 最后一条消息
  uint64 time = 7; // 会话创建时间
}